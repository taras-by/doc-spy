<?php

namespace App\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends \Doctrine\ORM\EntityRepository
{
    use PaginatorTrait;

    const EVENT_LIFETIME = 2;

    public function findLast(): array
    {
        return $this->createQueryBuilder('i')
            //->select(['i.title', 'i.link'])
            ->leftJoin('i.source', 's')
            ->addSelect('s')
            ->orderBy('i.publishedAt', 'DESC')
            ->setMaxResults(60)
            ->getQuery()
            ->getArrayResult();
    }

    public function findPaginatedByTagId(int $id, int $page, int $limit): Paginator
    {
        $query = $this->createQueryBuilder('i')
            ->leftJoin('i.source', 's')
            ->leftJoin('s.tags', 't')
            ->addSelect('s')
            ->where('t.id = :tag_id')
            ->setParameter('tag_id', $id)
            ->orderBy('i.publishedAt', 'DESC')
            ->getQuery();

        return $this->paginate($query, $page, $limit);
    }

    public function findEventsPaginated(int $page, int $limit): Paginator
    {
        $query = $this->createQueryBuilder('i')
            ->leftJoin('i.source', 's')
            ->leftJoin('s.tags', 't')
            ->addSelect('s')
            ->where('i.startDate IS NOT NULL')
            ->where('i.startDate > :date')
            ->setParameter('date', new \DateTime(sprintf('-%s days', self::EVENT_LIFETIME)))
            ->orderBy('i.startDate', 'ASC')
            ->getQuery();

        return $this->paginate($query, $page, $limit);
    }

    public function findPaginatedBySourceId(int $id, int $page, int $limit): Paginator
    {
        $query = $this->createQueryBuilder('i')
            ->leftJoin('i.source', 's')
            ->addSelect('s')
            ->where('s.id = :source_id')
            ->setParameter('source_id', $id)
            ->orderBy('i.publishedAt', 'DESC')
            ->getQuery();

        return $this->paginate($query, $page, $limit);
    }

    public function findPaginatedByPhrase(string $phrase, int $page, int $limit): Paginator
    {
        $query = $this->createQueryBuilder('i')
            ->leftJoin('i.source', 's')
            ->addSelect('s');

        foreach (explode(' ', $phrase) as $i => $word) {
            $query->andWhere('i.title like :word_' . $i)
                ->setParameter('word_' . $i, '%' . $word . '%');
        }

        $query->orderBy('i.publishedAt', 'DESC');

        return $this->paginate($query->getQuery(), $page, $limit);
    }

    public function findPaginatedFromFavoriteSources(int $page, int $limit): Paginator
    {
        $query = $this->createQueryBuilder('i')
            ->leftJoin('i.source', 's')
            ->addSelect('s')
            ->where('s.favorite = :favorite')
            ->setParameter('favorite', true)
            ->orderBy('i.publishedAt', 'DESC')
            ->getQuery();

        return $this->paginate($query, $page, $limit);
    }

    public function deleteOlderThenDate(\DateTime $date): int
    {
        return $this->createQueryBuilder('i')
            ->delete()
            ->where('i.publishedAt < :date')
            ->setParameter('date', $date)
            ->getQuery()
            ->execute();
    }
}
